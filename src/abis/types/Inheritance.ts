/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface InheritanceInterface extends utils.Interface {
  functions: {
    "HeirMessage()": FunctionFragment;
    "IamAlive()": FunctionFragment;
    "MSGFirstHalf()": FunctionFragment;
    "Owners(address)": FunctionFragment;
    "addBriefOwner(string,address[],uint256,string)": FunctionFragment;
    "checkOwnersStatus()": FunctionFragment;
    "getDiff()": FunctionFragment;
    "getHash(address)": FunctionFragment;
    "getHiers(address)": FunctionFragment;
    "getName(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HeirMessage"
      | "IamAlive"
      | "MSGFirstHalf"
      | "Owners"
      | "addBriefOwner"
      | "checkOwnersStatus"
      | "getDiff"
      | "getHash"
      | "getHiers"
      | "getName"
      | "isOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HeirMessage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "IamAlive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MSGFirstHalf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Owners",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBriefOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOwnersStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDiff", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "HeirMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IamAlive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MSGFirstHalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBriefOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOwnersStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDiff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;

  events: {};
}

export interface Inheritance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InheritanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HeirMessage(overrides?: CallOverrides): Promise<[string]>;

    IamAlive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    MSGFirstHalf(overrides?: CallOverrides): Promise<[string]>;

    Owners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string] & {
        Name: string;
        OwnerAddress: string;
        pingPeriod: BigNumber;
        LastPing: BigNumber;
        BriefIPFSHash: string;
      }
    >;

    addBriefOwner(
      _Name: PromiseOrValue<string>,
      _Heirs: PromiseOrValue<string>[],
      _pingPeriod: PromiseOrValue<BigNumberish>,
      _BriefIPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkOwnersStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDiff(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeDiff: BigNumber }>;

    getHash(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    getHiers(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getName(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { name: string }>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  HeirMessage(overrides?: CallOverrides): Promise<string>;

  IamAlive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  MSGFirstHalf(overrides?: CallOverrides): Promise<string>;

  Owners(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string] & {
      Name: string;
      OwnerAddress: string;
      pingPeriod: BigNumber;
      LastPing: BigNumber;
      BriefIPFSHash: string;
    }
  >;

  addBriefOwner(
    _Name: PromiseOrValue<string>,
    _Heirs: PromiseOrValue<string>[],
    _pingPeriod: PromiseOrValue<BigNumberish>,
    _BriefIPFSHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkOwnersStatus(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDiff(overrides?: CallOverrides): Promise<BigNumber>;

  getHash(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHiers(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getName(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    HeirMessage(overrides?: CallOverrides): Promise<string>;

    IamAlive(overrides?: CallOverrides): Promise<void>;

    MSGFirstHalf(overrides?: CallOverrides): Promise<string>;

    Owners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string] & {
        Name: string;
        OwnerAddress: string;
        pingPeriod: BigNumber;
        LastPing: BigNumber;
        BriefIPFSHash: string;
      }
    >;

    addBriefOwner(
      _Name: PromiseOrValue<string>,
      _Heirs: PromiseOrValue<string>[],
      _pingPeriod: PromiseOrValue<BigNumberish>,
      _BriefIPFSHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkOwnersStatus(overrides?: CallOverrides): Promise<void>;

    getDiff(overrides?: CallOverrides): Promise<BigNumber>;

    getHash(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHiers(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getName(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    HeirMessage(overrides?: CallOverrides): Promise<BigNumber>;

    IamAlive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    MSGFirstHalf(overrides?: CallOverrides): Promise<BigNumber>;

    Owners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBriefOwner(
      _Name: PromiseOrValue<string>,
      _Heirs: PromiseOrValue<string>[],
      _pingPeriod: PromiseOrValue<BigNumberish>,
      _BriefIPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkOwnersStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDiff(overrides?: CallOverrides): Promise<BigNumber>;

    getHash(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHiers(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HeirMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IamAlive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    MSGFirstHalf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Owners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBriefOwner(
      _Name: PromiseOrValue<string>,
      _Heirs: PromiseOrValue<string>[],
      _pingPeriod: PromiseOrValue<BigNumberish>,
      _BriefIPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkOwnersStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDiff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHash(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHiers(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
